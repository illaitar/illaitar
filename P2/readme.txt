                                                                           Алутис Никита группа 207

                           ═══════════════█████══════████═══════════════
                           ════════════███▒██═════════███████═══════════
                           ═════════███▒▒▒██═══════════██▒▒▒████════════
                           ══════████▒▒▒▒███════════════███▒▒▒▒███══════
                           ═════███▒▒▒▒████═════════════████▒▒▒▒▒███════
                           ═══███▒▒█▒█▒████═══██════██══█████▒█▒█▒███═══
                           ══███▒▒█▒█▒▒█████══████████══█████▒█▒██▒▒██══
                           ═███▒▒██▒█▒▒██████══██████═███████▒██▒██▒███═
                           ████▒██▒▒██▒██████████████████████▒██▒███▒███
                           ███▒▒██▒▒██▒█████████████████████▒███▒███▒███
                           ███▒████▒███▒███████████████████▒▒███▒███▒▒██
                           ═██▒▒███▒████▒██████████████████▒███▒████▒███
                           ═███▒████▒██████████████████████████▒████▒██═
                           ══██▒████████══███████████████══████████▒███═
                           ═══██▒███═██═══════████████══════██████████══
                           ════████════════════██████═══════════████════
                           ══════███══════════███══███══════════██══════
                           ═══════███═════════█══════█═════════███══════

/--------------------------------------------------------------------------------------------------\
|                                                                                                  |
|                                       Библиотека Graphula                                        |
|                                                                                                  |
\--------------------------------------------------------------------------------------------------/

----------------------------------------------------------------------------------------------------
                                            Предисловие
----------------------------------------------------------------------------------------------------
                            Рекомендуется читать readme в окне не меньше чем в 100 символов в ширину

Это библиотека написана студентом второго курса ВМК МГУ Алутисом Никитой Арвидасовичем.

Она позволяет работать с неориентированными взвешенными графами без петель, создавать их и удалять, 
а так же
представлена реализация алгоритма поиска кратчайшего пути методом Флойда-Уоршела и 
вывод графа по компонентом связности.

Вершины графа имеют ключи в виде переменной типа int, они должны быть положительными для 
корректной работы алгоритмов.

Ребра графа должны иметь положительные веса типа int <= 10000

ВАЖНО!!! перед работой с графом необходимо его инициализировать функцией graphula_def_init
Пример:
    GraphulaGraph my_graph;
    graphula_def_init(&my_graph); 
----------------------------------------------------------------------------------------------------
                                            Реализация
----------------------------------------------------------------------------------------------------

Граф сделан как список вершин, каждая из который содержит список ребер, смежных ей. Основной тип 
для пользователя - ссылка на элемент списка вершин, GraphulaGraph

----------------------------------------------------------------------------------------------------
                                             Тип графа
----------------------------------------------------------------------------------------------------

Основной тип (для использования пользователем)
    typedef GraphulaNode *GraphulaGraph;

----------------------------------------------------------------------------------------------------
                                   Вспомогательные типы данных
----------------------------------------------------------------------------------------------------
Вспомогательные типы
    typedef struct GraphulaEdge{
        int lead;
        int weight;
        struct GraphulaEdge *prev;
        struct GraphulaEdge *next;
    } GraphulaEdge;

    typedef struct GraphulaNode{
        int index;
        struct GraphulaNode *prev;
        struct GraphulaNode *next;
        GraphulaEdge *edges;
    } GraphulaNode;
----------------------------------------------------------------------------------------------------
                                Основные функции работы с графом
----------------------------------------------------------------------------------------------------
graphula_def_init:
    Синопсис:
        void 
        graphula_def_init(GraphulaGraph *graph)
    Описание:
        Инициализирует граф для работы с ним. С графом до этого не должны производиться действия.
    На вход: 
        адрес переменной типа GraphulaGraph

graphula_add_node:
    Синопсис:
        int 
        graphula_add_node(GraphulaGraph *gr, int index)
    Описание:
        Создает в графе вершину
    На вход: 
        адрес переменной типа graphula_graph, 
        число типа int - ключ вершины
    На выход: код ошибки
        0 - все прошло успешно
        1 - такая вершина уже есть в графе
        6 - не хватает памяти

graphula_add_edge:
    Синопсис:
        int 
        graphula_add_edge(GraphulaGraph *gr, int index, int lead, int weight)
    Описание:
        Создает в графе ребро
    На вход: 
        адрес переменной типа graphula_graph, 
        число типа int - ключ первой вершины,
        число типа int - ключ второй вершины,
        число типа int - вес ребра
    На выход: код ошибки
        0 - все прошло успешно
        1 - граф пуст
        2 - в графе нет первой вершины
        3 - в графе нет второй вершины
        4 - такое ребро уже есть
        5 - вес поданный на вход < 0
        6 - не хватает памяти
        7 - создается петля

graphula_delete_edge:
    Синопсис:
        int 
        graphula_delete_edge(GraphulaGraph *gr, int index, int lead)
    Описание:
        Удаляет из графа ребро
    На вход:
        Адрес переменной типа graphula_graph, 
        число типа int - ключ первой вершины,
        число типа int - ключ второй вершины,
    На выход: код ошибки
        0 - не нашлась ни вершина 1, ни вершина 2 или не нашлось такое ребро смежное с ними
        1 - все сработало успешно

graphula_delete_node:
    Синопсис:
        int 
        graphula_delete_node(GraphulaGraph *gr, int index)
    Описание:
        Удаляет из графа вершину
    на вход: 
        адрес переменной типа GraphulaGraph, 
        число типа int - ключ вершины
    на выход: код ошибки
        0 - все хорошо
        1 - вершина не нашлась

graphula_free:
    Синопсис:
        void 
        graphula_free(GraphulaGraph graph)
    Описание:
        Удаляет весь граф
    на вход: 
        переменная типа GraphulaGraph

graphula_length:
    Синопсис:
        int 
        graphula_length(GraphulaGraph graph)
    Описание:
        Возвращает количество вершин в графе
    на вход:
        Переменная типа GraphulaGraph


graphula_print:
    Синопсис:
        void 
        graphula_print(GraphulaGraph graph)
    Описание:
        Печатает весь граф
    на вход:
        Переменная типа GraphulaGraph
----------------------------------------------------------------------------------------------------
                                   Функции внешней инициализации
----------------------------------------------------------------------------------------------------
Для этих двух функций необходимо соблюдать такой формат ввода:

1)вершины
    n ключ_вершины

2)ребра
    e ключ_вершины1 ключ_вершины2 вес_вершины

Пример:
    n 1
    n 2
    n 3
    e 1 2 5
    e 1 3 100

создаст граф с вершинами 1, 2, 3 и ребра 1->{5}->2 и 1->{100}->3

При несоблюдении формата правильность создания графа не гарантируется!!!

graphula_init:
    Синопсис:
        int 
        graphula_init(GraphulaGraph *graph)
    Описание:
        Считывает граф в указанном выше формате с потока stdin
    На вход:
        переменная типа GraphulaGraph

graphula_file_init:
    Синопсис:
        int 
        graphula_file_init(GraphulaGraph *graph, char *name)
    Описание:
        Считывает граф в указанном выше формате из файла с именем name 
    На вход:
        переменная типа GraphulaGraph,
        строка имени файла
    На выход:
        0 - все успешно сработало
        1 - такого файла не существует
        2 - ввод файла закончился не eof, а строкой, которая не начиналась с e или c
            (несовпадение с форматом)
----------------------------------------------------------------------------------------------------
                                  Специальные функции (задание)
----------------------------------------------------------------------------------------------------
graphula_shortest_root:
    Синопсис:
        int 
        graphula_shortest_root(GraphulaGraph graph, int start, int end)
    Описание:
        Находит кратчайший путь из одной вершины графа в другую. Если пути нет, вернет -1. 
        Внимание! Для корректного результата веса ребер графа не должны превышать 10000
    На вход:
        переменная типа GraphulaGraph, 
        число типа int - ключ первой вершины,
        число типа int - ключ второй вершины,
    На выход: код ошибки
        >0 - все успешно сработало, число - длина пути
        -1 - нет пути
        -2 - нет обоих вершин
        -3 - нет первой вершины
        -4 - нет второй вершины
        -5 - граф пустой

print_connect_groups:
    Синопсис:
	void 
	print_connect_groups(GraphulaGraph graph)
    Описание:
        Распечатывает граф по группам связности
    На вход:
        переменная типа GraphulaGraph

graphula_print_graph_matrix:
    Синопсис:
        void 
        graphula_print_graph_matrix(GraphulaGraph graph)
    Описание:
        Распечатывает матрицу смежности графа
    На вход:
        переменная типа GraphulaGraph
----------------------------------------------------------------------------------------------------
                                     Вспомогательные функции
----------------------------------------------------------------------------------------------------
Эти функции не указаны в хедере

graphula_blank_node:
    Синопсис:
        GraphulaNode 
        *graphula_blank_node(int index){
    Описание:
        Выделяет память и частично заполняет вершину, которую и возвращает
    на вход: 
        ключ вершины
    на выход:
        ссылка на вершину

graphula_blank_edge:
    Синопсис:
        GraphulaEdge 
        *graphula_blank_edge(int lead, int weight)
    Описание:
        Выделяет память и частично заполняет ребро, которое и возвращает
    на вход: 
        ключ вершины, куда ведет ребро типа int
        вес ребра типа int
    на выход:
        ссылка на ребро

graphula_node_exists:
    Синопсис:
        GraphulaNode 
        *graphula_node_exists(GraphulaGraph graph, int index)
    Описание:
        Проверяет, есть ли в графе вершина с заданным ключом
    на вход: 
        переменная типа GraphulaGraph
        вес ребра типа int
    на выход:
        ссылка на вершину *GraphulaNode - если она есть
        NULL - если вершина не нашлась

graphula_edge_exists:
    Синопсис:
        int 
        graphula_edge_exists(GraphulaEdge *edge, int lead)
    Описание:
        Проверяет, есть ли среди ребер определенной вершины заданное ребро
    на вход:
        ссылка на первое ребро данной вершины типа GraphulaEdge
        ключ вершины, куда ведет ребро типа int
    на выход:
        1 если такое ребро существует
        0 если ребро не существует

graphula_find_last_edge:
    Синопсис:
        GraphulaEdge 
        *graphula_find_last_edge(GraphulaEdge *edge)
    Описание:
        Находит последнее ребро в списке ребер, поданном на вход
    на вход:
        ссылка на первое ребро данной вершины типа GraphulaEdge
    на выход:
        ссылка на последнее ребро если список не пустой
        NULL если список пустой

graphula_delete_edge_in:
    Синопсис:
        GraphulaEdge 
        *graphula_delete_edge_in(GraphulaEdge *edge, int lead)
    Описание:
        Удаление ребра из списка ребер по ключу вершины куда оно ведет
    на вход:
        ссылка на первое ребро данной вершины типа GraphulaEdge
    на выход:
        ссылка на последнее ребро если список не пустой
        NULL если список пустой

graphula_print_edges:
    Синопсис:
        void 
        graphula_print_edges(GraphulaEdge *edge, int index)
    Описание:
        Печатает список ребер
    на вход:
        ссылка на первое ребро данной вершины типа GraphulaEdge

graphula_free_edges:
    Синопсис:
        void 
        graphula_free_edges(GraphulaEdge *edge)
    Описание:
        Очищает память занятую списком ребер
    на вход:
        ссылка на первое ребро данной вершины типа GraphulaEdge

graphula_find_node:
    Синопсис:
        GraphulaNode 
        *graphula_find_node(GraphulaNode *graph, int num)
    Описание:
        Возвращает ссылку на вершину с порядковым номером num
    на вход:
        graph типа GraphulaGraph
        переменная типа int
    на выход:
        Ссылка на переменную типа GraphulaNode

graphula_pos_by_index:
    Синопсис:
        int
        graphula_index(GraphulaGraph graph, int key)
    Описание:
        Вспомогательная функция, которая возвращает порядковый номер вершины 
        с ключом key в списке
    На вход:
        Переменная типа GraphulaGraph
        Ключ вершины типа int
    На выход:
        порядковый номер вершины в списке типа int если она существует
        -1 - если вершины в графе нет

graphula_find_node:
    Синопсис:
        GraphulaNode 
        *graphula_find_node(GraphulaGraph graph, int num)
    Описание:
        Вспомогательная функция, которая возвращает ссылку на вершину
        с индексом, поданным на вход
    На вход:
        Переменная типа GraphulaGraph
        Ключ вершины типа int
    На выход:
        ссылка на вершину типа GraphulaNode если она существует
        NULL если вершины нет в графе

graphula_init_matrix:
    Синопсис:
        void 
        graphula_init_matrix(GraphulaGraph graph, int len, int matrix[][len])
    Описание:
        Заполнение матрицы смежности графа
    На вход:
        Переменная типа GraphulaGraph
        Количество вершин в графе и соответственно размер матрицы
        Двумерная матрица типа int

graphula_print_matrix:
    Синопсис:
        void 
        graphula_print_matrix(int len, int matrix[][len])
    Описание:
        Вывод матрицы графа
    На вход:
        размер матрицы
        Двумерная матрица типа int

graphula_is_there:
    Синопсис:
        int 
        graphula_is_there(int *mas, int len, int what)
    Описание:
        Есть ли в массиве длины len число what
    На вход:
        Массив int-ов
        Длина типа int
        то что ищем типа int

str_in:
    Синопсис:
        char 
        *str_in(FILE *stream)
    Описание:
        Ввод "бесконечной" (пока хватает памяти) строки из потока stream
    На вход:
        ссылка на переменную типа *FILE
    На выход:
        строка